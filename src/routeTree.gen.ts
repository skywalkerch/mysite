/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TodoImport } from './routes/todo'
import { Route as AboutImport } from './routes/about'
import { Route as DocsRouteImport } from './routes/docs/route'
import { Route as IndexImport } from './routes/index'
import { Route as GalleryIndexImport } from './routes/gallery/index'
import { Route as Gallery2024Import } from './routes/gallery/2024'
import { Route as DocsSlugImport } from './routes/docs/$slug'

// Create/Update Routes

const TodoRoute = TodoImport.update({
  id: '/todo',
  path: '/todo',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const DocsRouteRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GalleryIndexRoute = GalleryIndexImport.update({
  id: '/gallery/',
  path: '/gallery/',
  getParentRoute: () => rootRoute,
} as any)

const Gallery2024Route = Gallery2024Import.update({
  id: '/gallery/2024',
  path: '/gallery/2024',
  getParentRoute: () => rootRoute,
} as any)

const DocsSlugRoute = DocsSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => DocsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/todo': {
      id: '/todo'
      path: '/todo'
      fullPath: '/todo'
      preLoaderRoute: typeof TodoImport
      parentRoute: typeof rootRoute
    }
    '/docs/$slug': {
      id: '/docs/$slug'
      path: '/$slug'
      fullPath: '/docs/$slug'
      preLoaderRoute: typeof DocsSlugImport
      parentRoute: typeof DocsRouteImport
    }
    '/gallery/2024': {
      id: '/gallery/2024'
      path: '/gallery/2024'
      fullPath: '/gallery/2024'
      preLoaderRoute: typeof Gallery2024Import
      parentRoute: typeof rootRoute
    }
    '/gallery/': {
      id: '/gallery/'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DocsRouteRouteChildren {
  DocsSlugRoute: typeof DocsSlugRoute
}

const DocsRouteRouteChildren: DocsRouteRouteChildren = {
  DocsSlugRoute: DocsSlugRoute,
}

const DocsRouteRouteWithChildren = DocsRouteRoute._addFileChildren(
  DocsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docs': typeof DocsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/todo': typeof TodoRoute
  '/docs/$slug': typeof DocsSlugRoute
  '/gallery/2024': typeof Gallery2024Route
  '/gallery': typeof GalleryIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs': typeof DocsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/todo': typeof TodoRoute
  '/docs/$slug': typeof DocsSlugRoute
  '/gallery/2024': typeof Gallery2024Route
  '/gallery': typeof GalleryIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/docs': typeof DocsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/todo': typeof TodoRoute
  '/docs/$slug': typeof DocsSlugRoute
  '/gallery/2024': typeof Gallery2024Route
  '/gallery/': typeof GalleryIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs'
    | '/about'
    | '/todo'
    | '/docs/$slug'
    | '/gallery/2024'
    | '/gallery'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docs'
    | '/about'
    | '/todo'
    | '/docs/$slug'
    | '/gallery/2024'
    | '/gallery'
  id:
    | '__root__'
    | '/'
    | '/docs'
    | '/about'
    | '/todo'
    | '/docs/$slug'
    | '/gallery/2024'
    | '/gallery/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocsRouteRoute: typeof DocsRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  TodoRoute: typeof TodoRoute
  Gallery2024Route: typeof Gallery2024Route
  GalleryIndexRoute: typeof GalleryIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsRouteRoute: DocsRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  TodoRoute: TodoRoute,
  Gallery2024Route: Gallery2024Route,
  GalleryIndexRoute: GalleryIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/docs",
        "/about",
        "/todo",
        "/gallery/2024",
        "/gallery/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/docs": {
      "filePath": "docs/route.tsx",
      "children": [
        "/docs/$slug"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/todo": {
      "filePath": "todo.tsx"
    },
    "/docs/$slug": {
      "filePath": "docs/$slug.tsx",
      "parent": "/docs"
    },
    "/gallery/2024": {
      "filePath": "gallery/2024.tsx"
    },
    "/gallery/": {
      "filePath": "gallery/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
